/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Asset;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-17T12:29:00.555895+02:00[Europe/Madrid]", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "Assets", description = "the Assets API")
public interface AssetsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /assets/{assetId} : Borrar un asset
     *
     * @param assetId  (required)
     * @return Asset eliminado (status code 204)
     */
    @Operation(
        operationId = "assetsAssetIdDelete",
        summary = "Borrar un asset",
        tags = { "Assets" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Asset eliminado")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/assets/{assetId}"
    )
    
    default ResponseEntity<Void> assetsAssetIdDelete(
        @Parameter(name = "assetId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("assetId") String assetId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /assets/{assetId} : Obtener un asset por ID
     *
     * @param assetId  (required)
     * @return Detalle de asset (status code 200)
     */
    @Operation(
        operationId = "assetsAssetIdGet",
        summary = "Obtener un asset por ID",
        tags = { "Assets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Detalle de asset", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Asset.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/assets/{assetId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Asset> assetsAssetIdGet(
        @Parameter(name = "assetId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("assetId") String assetId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"id\" : \"id\", \"type\" : \"type\", \"value\" : 0.8008281904610115, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /assets/{assetId} : Modificar un asset
     *
     * @param assetId  (required)
     * @param asset  (required)
     * @return Asset actualizado (status code 200)
     */
    @Operation(
        operationId = "assetsAssetIdPatch",
        summary = "Modificar un asset",
        tags = { "Assets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Asset actualizado")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/assets/{assetId}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> assetsAssetIdPatch(
        @Parameter(name = "assetId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("assetId") String assetId,
        @Parameter(name = "Asset", description = "", required = true) @Valid @RequestBody Asset asset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /assets : Listar todos los assets
     *
     * @return Lista de assets (status code 200)
     */
    @Operation(
        operationId = "assetsGet",
        summary = "Listar todos los assets",
        tags = { "Assets" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de assets", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Asset.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/assets",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Asset>> assetsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"id\" : \"id\", \"type\" : \"type\", \"value\" : 0.8008281904610115, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"id\" : \"id\", \"type\" : \"type\", \"value\" : 0.8008281904610115, \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /assets : Crear un asset
     *
     * @param asset  (required)
     * @return Asset creado (status code 201)
     */
    @Operation(
        operationId = "assetsPost",
        summary = "Crear un asset",
        tags = { "Assets" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Asset creado")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/assets",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> assetsPost(
        @Parameter(name = "Asset", description = "", required = true) @Valid @RequestBody Asset asset
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
