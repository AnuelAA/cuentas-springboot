/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Liability;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-17T12:29:00.555895+02:00[Europe/Madrid]", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "Liabilities", description = "the Liabilities API")
public interface LiabilitiesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /liabilities : Listar todas las liabilities
     *
     * @return Lista de liabilities (status code 200)
     */
    @Operation(
        operationId = "liabilitiesGet",
        summary = "Listar todas las liabilities",
        tags = { "Liabilities" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de liabilities", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Liability.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/liabilities",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Liability>> liabilitiesGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"amount\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\", \"type\" : \"type\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }, { \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"amount\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\", \"type\" : \"type\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /liabilities/{liabilityId} : Borrar una liability
     *
     * @param liabilityId  (required)
     * @return Liability eliminada (status code 204)
     */
    @Operation(
        operationId = "liabilitiesLiabilityIdDelete",
        summary = "Borrar una liability",
        tags = { "Liabilities" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Liability eliminada")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/liabilities/{liabilityId}"
    )
    
    default ResponseEntity<Void> liabilitiesLiabilityIdDelete(
        @Parameter(name = "liabilityId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("liabilityId") String liabilityId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /liabilities/{liabilityId} : Obtener una liability por ID
     *
     * @param liabilityId  (required)
     * @return Detalle de liability (status code 200)
     */
    @Operation(
        operationId = "liabilitiesLiabilityIdGet",
        summary = "Obtener una liability por ID",
        tags = { "Liabilities" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Detalle de liability", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Liability.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/liabilities/{liabilityId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Liability> liabilitiesLiabilityIdGet(
        @Parameter(name = "liabilityId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("liabilityId") String liabilityId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2000-01-23T04:56:07.000+00:00\", \"amount\" : 0.8008281904610115, \"name\" : \"name\", \"id\" : \"id\", \"type\" : \"type\", \"updatedAt\" : \"2000-01-23T04:56:07.000+00:00\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /liabilities/{liabilityId} : Modificar una liability
     *
     * @param liabilityId  (required)
     * @param liability  (required)
     * @return Liability actualizada (status code 200)
     */
    @Operation(
        operationId = "liabilitiesLiabilityIdPatch",
        summary = "Modificar una liability",
        tags = { "Liabilities" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Liability actualizada")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/liabilities/{liabilityId}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> liabilitiesLiabilityIdPatch(
        @Parameter(name = "liabilityId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("liabilityId") String liabilityId,
        @Parameter(name = "Liability", description = "", required = true) @Valid @RequestBody Liability liability
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /liabilities : Crear una liability
     *
     * @param liability  (required)
     * @return Liability creada (status code 201)
     */
    @Operation(
        operationId = "liabilitiesPost",
        summary = "Crear una liability",
        tags = { "Liabilities" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Liability creada")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/liabilities",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> liabilitiesPost(
        @Parameter(name = "Liability", description = "", required = true) @Valid @RequestBody Liability liability
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
