/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Record;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-17T12:29:00.555895+02:00[Europe/Madrid]", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "Records", description = "the Records API")
public interface RecordsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /records : Listar registros
     *
     * @return Lista de registros (status code 200)
     */
    @Operation(
        operationId = "recordsGet",
        summary = "Listar registros",
        tags = { "Records" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista de registros", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Record.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/records",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Record>> recordsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"date\" : \"2000-01-23\", \"amount\" : 0.8008281904610115, \"assetId\" : \"assetId\", \"id\" : \"id\", \"liabilityId\" : \"liabilityId\" }, { \"date\" : \"2000-01-23\", \"amount\" : 0.8008281904610115, \"assetId\" : \"assetId\", \"id\" : \"id\", \"liabilityId\" : \"liabilityId\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /records : Crear registro
     *
     * @param record  (required)
     * @return Registro creado (status code 201)
     */
    @Operation(
        operationId = "recordsPost",
        summary = "Crear registro",
        tags = { "Records" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Registro creado")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/records",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> recordsPost(
        @Parameter(name = "Record", description = "", required = true) @Valid @RequestBody Record record
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
